/* 
 * Intrinio API
 *
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Intrinio.Client;
using Intrinio.Api;
using Intrinio.Model;

namespace Intrinio.Test
{
    /// <summary>
    ///  Class for testing CompanyApi
    /// </summary>
    [TestFixture]
    public class CompanyApiTests
    {
        private CompanyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CompanyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CompanyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CompanyApi
            //Assert.IsInstanceOfType(typeof(CompanyApi), instance, "instance is a CompanyApi");
        }

        
        /// <summary>
        /// Test FilterCompanies
        /// </summary>
        [Test]
        public void FilterCompaniesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? lastFilingDate = null;
            //string sic = null;
            //string template = null;
            //string sector = null;
            //string industryCategory = null;
            //string industryGroup = null;
            //string nextPage = null;
            //var response = instance.FilterCompanies(lastFilingDate, sic, template, sector, industryCategory, industryGroup, nextPage);
            //Assert.IsInstanceOf<List<CompanySummary>> (response, "response is List<CompanySummary>");
        }
        
        /// <summary>
        /// Test FilterCompanyFundamentals
        /// </summary>
        [Test]
        public void FilterCompanyFundamentalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //DateTime? filedAfter = null;
            //DateTime? filedBefore = null;
            //bool? reportedOnly = null;
            //int? fiscalYear = null;
            //string statementCode = null;
            //string type = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string nextPage = null;
            //var response = instance.FilterCompanyFundamentals(identifier, filedAfter, filedBefore, reportedOnly, fiscalYear, statementCode, type, startDate, endDate, nextPage);
            //Assert.IsInstanceOf<List<Fundamental>> (response, "response is List<Fundamental>");
        }
        
        /// <summary>
        /// Test GetAllCompanies
        /// </summary>
        [Test]
        public void GetAllCompaniesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nextPage = null;
            //var response = instance.GetAllCompanies(nextPage);
            //Assert.IsInstanceOf<List<CompanySummary>> (response, "response is List<CompanySummary>");
        }
        
        /// <summary>
        /// Test GetAllCompanyFilings
        /// </summary>
        [Test]
        public void GetAllCompanyFilingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string nextPage = null;
            //var response = instance.GetAllCompanyFilings(identifier, nextPage);
            //Assert.IsInstanceOf<List<FilingSummary>> (response, "response is List<FilingSummary>");
        }
        
        /// <summary>
        /// Test GetAllCompanyFundamentals
        /// </summary>
        [Test]
        public void GetAllCompanyFundamentalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string nextPage = null;
            //var response = instance.GetAllCompanyFundamentals(identifier, nextPage);
            //Assert.IsInstanceOf<List<Fundamental>> (response, "response is List<Fundamental>");
        }
        
        /// <summary>
        /// Test GetCompany
        /// </summary>
        [Test]
        public void GetCompanyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //var response = instance.GetCompany(identifier);
            //Assert.IsInstanceOf<Company> (response, "response is Company");
        }
        
        /// <summary>
        /// Test GetCompanyDataPointNumber
        /// </summary>
        [Test]
        public void GetCompanyDataPointNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //var response = instance.GetCompanyDataPointNumber(identifier, item);
            //Assert.IsInstanceOf<DataPointNumber> (response, "response is DataPointNumber");
        }
        
        /// <summary>
        /// Test GetCompanyDataPointText
        /// </summary>
        [Test]
        public void GetCompanyDataPointTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //var response = instance.GetCompanyDataPointText(identifier, item);
            //Assert.IsInstanceOf<DataPointText> (response, "response is DataPointText");
        }
        
        /// <summary>
        /// Test GetCompanyHistoricalData
        /// </summary>
        [Test]
        public void GetCompanyHistoricalDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //string type = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string sortOrder = null;
            //string nextPage = null;
            //var response = instance.GetCompanyHistoricalData(identifier, item, type, startDate, endDate, sortOrder, nextPage);
            //Assert.IsInstanceOf<List<HistoricalData>> (response, "response is List<HistoricalData>");
        }
        
        /// <summary>
        /// Test GetNews
        /// </summary>
        [Test]
        public void GetNewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string nextPage = null;
            //var response = instance.GetNews(identifier, nextPage);
            //Assert.IsInstanceOf<List<CompanyNews>> (response, "response is List<CompanyNews>");
        }
        
        /// <summary>
        /// Test LookupCompanyFundamental
        /// </summary>
        [Test]
        public void LookupCompanyFundamentalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string statementCode = null;
            //string fiscalPeriod = null;
            //int? fiscalYear = null;
            //var response = instance.LookupCompanyFundamental(identifier, statementCode, fiscalPeriod, fiscalYear);
            //Assert.IsInstanceOf<List<Fundamental>> (response, "response is List<Fundamental>");
        }
        
        /// <summary>
        /// Test SearchCompanies
        /// </summary>
        [Test]
        public void SearchCompaniesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //string nextPage = null;
            //var response = instance.SearchCompanies(query, nextPage);
            //Assert.IsInstanceOf<List<CompanySummary>> (response, "response is List<CompanySummary>");
        }
        
    }

}

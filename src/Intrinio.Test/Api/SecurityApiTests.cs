/* 
 * Intrinio API
 *
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Intrinio.Client;
using Intrinio.Api;
using Intrinio.Model;

namespace Intrinio.Test
{
    /// <summary>
    ///  Class for testing SecurityApi
    /// </summary>
    [TestFixture]
    public class SecurityApiTests
    {
        private SecurityApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SecurityApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SecurityApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SecurityApi
            //Assert.IsInstanceOfType(typeof(SecurityApi), instance, "instance is a SecurityApi");
        }

        
        /// <summary>
        /// Test GetAllSecurities
        /// </summary>
        [Test]
        public void GetAllSecuritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nextPage = null;
            //var response = instance.GetAllSecurities(nextPage);
            //Assert.IsInstanceOf<List<SecuritySummary>> (response, "response is List<SecuritySummary>");
        }
        
        /// <summary>
        /// Test GetSecurityById
        /// </summary>
        [Test]
        public void GetSecurityByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //var response = instance.GetSecurityById(identifier);
            //Assert.IsInstanceOf<Security> (response, "response is Security");
        }
        
        /// <summary>
        /// Test GetSecurityDataPointNumber
        /// </summary>
        [Test]
        public void GetSecurityDataPointNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //var response = instance.GetSecurityDataPointNumber(identifier, item);
            //Assert.IsInstanceOf<DataPointNumber> (response, "response is DataPointNumber");
        }
        
        /// <summary>
        /// Test GetSecurityDataPointText
        /// </summary>
        [Test]
        public void GetSecurityDataPointTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //var response = instance.GetSecurityDataPointText(identifier, item);
            //Assert.IsInstanceOf<DataPointText> (response, "response is DataPointText");
        }
        
        /// <summary>
        /// Test GetSecurityHistoricalData
        /// </summary>
        [Test]
        public void GetSecurityHistoricalDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //string item = null;
            //string type = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string sortOrder = null;
            //string nextPage = null;
            //var response = instance.GetSecurityHistoricalData(identifier, item, type, startDate, endDate, sortOrder, nextPage);
            //Assert.IsInstanceOf<List<HistoricalData>> (response, "response is List<HistoricalData>");
        }
        
        /// <summary>
        /// Test GetSecurityStockPrices
        /// </summary>
        [Test]
        public void GetSecurityStockPricesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identifier = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string frequency = null;
            //string nextPage = null;
            //var response = instance.GetSecurityStockPrices(identifier, startDate, endDate, frequency, nextPage);
            //Assert.IsInstanceOf<List<StockPriceSummary>> (response, "response is List<StockPriceSummary>");
        }
        
        /// <summary>
        /// Test ScreenSecurities
        /// </summary>
        [Test]
        public void ScreenSecuritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SecurityScreenGroup logic = null;
            //string orderColumn = null;
            //string orderDirection = null;
            //bool? primaryOnly = null;
            //string nextPage = null;
            //var response = instance.ScreenSecurities(logic, orderColumn, orderDirection, primaryOnly, nextPage);
            //Assert.IsInstanceOf<List<SecurityScreenResult>> (response, "response is List<SecurityScreenResult>");
        }
        
        /// <summary>
        /// Test SearchSecurities
        /// </summary>
        [Test]
        public void SearchSecuritiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //string nextPage = null;
            //var response = instance.SearchSecurities(query, nextPage);
            //Assert.IsInstanceOf<List<SecuritySummary>> (response, "response is List<SecuritySummary>");
        }
        
    }

}
